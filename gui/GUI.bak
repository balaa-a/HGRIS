from packages.Import import *
from packages.hand.HandSystem import HANDSYSTEM
from packages.model.Model import Model
from packages.tool.Utils import LOG


class Test(QWidget):
    
    def __init__(self):
        super().__init__()
        LOG.log("手势识别系统开启...")
        self.closeEvent = threading.Event()
        self.closeEvent.clear()
        self.pauseEvent = threading.Event()
        self.pauseEvent.clear()
        self.n=0
        self.Init_UI()
        self.btn1.setEnabled(True)
        self.btn2.setEnabled(False)
        self.btn3.setEnabled(False)
        self.MODEL=Model('./checkpoints/best.pt')
        

    def Init_UI(self):
        logger.info("手势识别系统开启...")
        # 设置工具窗口的大小，前两个参数决定窗口的位置
        self.setGeometry(100, 100, 600, 680)
        # 设置工具窗口的标题
        self.setWindowTitle("基于视觉手势识别的交互系统")
        # 设置窗口的图标
        # w.setWindowIcon(QtGui.QIcon('x.jpg'))
        
        # 显示视频
        self.label0=QtWidgets.QLabel(self)
        self.label0.setGeometry(QtCore.QRect(20, 20, 380, 380))
        print(os.getcwd())
        img=cv2.imread("./resources/imgs/bg.png")
        self.bg = QImage(img.data, img.shape[1], img.shape[0], QImage.Format_RGB888)
        self.label0.setPixmap(QPixmap.fromImage(self.bg))

        # 当前手势
        self.label1 = QtWidgets.QLabel(self)
        # 设置标签的左边距，上边距，宽，高
        self.label1.setGeometry(QtCore.QRect(420, 20, 90, 20))
        # 设置文本标签的字体和大小，粗细等
        self.label1.setFont(QtGui.QFont("Roman times", 10))
        self.label1.setText("当前手势")

        self.labeltext1 = QtWidgets.QLabel(self)
        self.labeltext1.setGeometry(QtCore.QRect(420, 40, 160, 60))
        self.labeltext1.setFont(QtGui.QFont("Roman times", 10))
        self.labeltext1.setStyleSheet("QLabel{background:white;}"
            "QLabel{color:rgb(100,100,100,250);font-size:20px;qproperty-alignment:AlignCenter;font-family:Roman times;}"
            "QLabel:hover{color:rgb(100,100,100,120);}")

        
        # 指尖坐标
        self.label2 = QtWidgets.QLabel(self)
        # 设置标签的左边距，上边距，宽，高
        self.label2.setGeometry(QtCore.QRect(420, 120, 90, 20))
        # 设置文本标签的字体和大小，粗细等
        self.label2.setFont(QtGui.QFont("Roman times", 10))
        self.label2.setText("指尖坐标")
        # 添加设置一个文本框
        self.labeltext2 = QtWidgets.QLabel(self)
        self.labeltext2.setGeometry(QtCore.QRect(420, 140, 160, 60))
        self.labeltext2.setFont(QtGui.QFont("Roman times", 10))
        self.labeltext2.setStyleSheet("QLabel{background:white;}"
            "QLabel{color:rgb(100,100,100,250);font-size:20px;qproperty-alignment:AlignCenter;font-family:Roman times;}"
            "QLabel:hover{color:rgb(100,100,100,120);}")
        
        # 光标坐标
        self.label3 = QtWidgets.QLabel(self)
        # 设置标签的左边距，上边距，宽，高
        self.label3.setGeometry(QtCore.QRect(420, 220, 90, 20))
        # 设置文本标签的字体和大小，粗细等
        self.label3.setFont(QtGui.QFont("Roman times", 10))
        self.label3.setText("光标坐标")
        # 添加设置一个文本框
        self.labeltext3 = QtWidgets.QLabel(self)
        self.labeltext3.setGeometry(QtCore.QRect(420, 240, 160, 60))
        self.labeltext3.setFont(QtGui.QFont("Roman times", 10))
        self.labeltext3.setStyleSheet("QLabel{background:white;}"
            "QLabel{color:rgb(100,100,100,250);font-size:20px;qproperty-alignment:AlignCenter;font-family:Roman times;}"
            "QLabel:hover{color:rgb(100,100,100,120);}")
        
        # 准确率
        self.label4 = QtWidgets.QLabel(self)
        # 设置标签的左边距，上边距，宽，高
        self.label4.setGeometry(QtCore.QRect(420, 320, 90, 20))
        # 设置文本标签的字体和大小，粗细等
        self.label4.setFont(QtGui.QFont("Roman times", 10))
        self.label4.setText("准确率")
        # 添加设置一个文本框
        self.text4 = QtWidgets.QTextEdit(self)
        # 调整文本框的位置大小
        self.text4.setGeometry(QtCore.QRect(420, 340, 160, 60))
        self.text4.setLineWrapMode(True)
        
        # 日志
        self.label5 = QtWidgets.QLabel(self)
        # 设置标签的左边距，上边距，宽，高
        self.label5.setGeometry(QtCore.QRect(20, 420, 90, 20))
        # 设置文本标签的字体和大小，粗细等
        self.label5.setFont(QtGui.QFont("Roman times", 10))
        self.label5.setText("日志打印")
        # 添加设置一个文本框
        self.text5 = QtWidgets.QTextEdit(self)
        # 调整文本框的位置大小
        self.text5.setGeometry(QtCore.QRect(20, 440, 560, 140))
        self.text5.setLineWrapMode(True)
        self.text5.setText(LOG.log_lst)

        # 输入文本框
        self.text6 = QtWidgets.QTextEdit(self)
        # 调整文本框的位置大小
        self.text6.setGeometry(QtCore.QRect(20, 610, 140, 50))
        self.text6.setLineWrapMode(True)

        # OPEN按钮
        self.btn1 = QtWidgets.QPushButton(self)
        self.btn1.setGeometry(QtCore.QRect(180, 610, 120, 50))
        self.btn1.setText("OPEN")
        self.btn1.clicked.connect(self.open)

        # CLOSE按钮
        self.btn2 = QtWidgets.QPushButton(self)
        self.btn2.setGeometry(QtCore.QRect(320, 610, 120, 50))
        self.btn2.setText("CLOSE")
        self.btn2.clicked.connect(self.close)

        # PAUSE按钮
        self.btn3 = QtWidgets.QPushButton(self)
        self.btn3.setGeometry(QtCore.QRect(460, 610, 120, 50))
        self.btn3.setText("PAUSE")
        self.btn3.clicked.connect(self.pause)
    
        self.show()
        

    def open(self):
        LOG.log("打开视频...")
        self.text5.setText(LOG.log_lst)
        th = threading.Thread(target=self.display)
        th.start()


    def close(self):
        LOG.log("关闭视频...")
        self.text5.setText(LOG.log_lst)
        self.closeEvent.set()

    def pause(self):
        self.n+=1

        if self.n%2==1:
            LOG.log("暂停视频...")
            self.pauseEvent.set()
            self.btn3.setText("CONTINUE")
        else:
            LOG.log("继续视频...")
            self.pauseEvent.clear()
            self.btn3.setText("PAUSE")
        self.text5.setText(LOG.log_lst)


    def display(self):
        self.btn1.setEnabled(False)
        self.btn2.setEnabled(True)
        self.btn3.setEnabled(True)

        # 打开视频
        camera=cv2.VideoCapture(0)
        # 如果没有成功打开摄像头
        if not camera.isOpened():
            logger.error("打开摄像头失败，请检查摄像头！")
            return
        # 如果成功打开摄像头，则打印出分辨率
        camera.set(3,1280)
        camera.set(4,720)
        logger.info("摄像头已经打开，视频流分辨率为({},{}), 帧率为{}fps.".format(camera.get(3),camera.get(4),camera.get(cv2.CAP_PROP_FPS)))

        
        while True:
            # 暂停
            if self.pauseEvent.is_set():
                while self.n%2==1:
                    continue
            # 关闭视频
            if self.closeEvent.is_set():
                break
            # 播放视频
            ret,frame=camera.read()
            if not ret:
                logger.error("读取摄像头失败！")
                break
            # 手势识别交互
            ret=HANDSYSTEM.start(self.MODEL,frame)
            if ret is None:
                continue
            # 将手势识别、指尖检测、光标坐标显示
            frame,figure_digital,finger_point,screen_point=ret
            self.labeltext1.setText(str(figure_digital))
            self.labeltext2.setText(str(finger_point))
            self.labeltext3.setText(str(screen_point))
            
            LOG.log(str(figure_digital))
            LOG.log(str(finger_point))
            LOG.log(str(screen_point))
            
            img = QImage(frame.data, frame.shape[1], frame.shape[0], QImage.Format_RGB888)

            self.label0.setPixmap(QPixmap.fromImage(img))



        camera.release()
        self.closeEvent.clear()
        self.pauseEvent.clear()
        self.label0.setPixmap(QPixmap.fromImage(self.bg))
        self.btn1.setEnabled(True)
        self.btn2.setEnabled(False)
        self.btn3.setEnabled(False)
        





if __name__=="__main__":
    # 创建应用程序和对象
    app = QtWidgets.QApplication(sys.argv)
    ui = Test()
    sys.exit(app.exec_())
